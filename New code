var xPositions = [];
var yPositions = [];
var speed = [];
var colors = [];

var currentScene = 0;
var item = 0;
var knight = 1;
var treasure = 0;

var question = 3;

var castle = [getImage("cute/DirtBlock"), getImage("cute/WallBlockTall")];

var castle = function() { 


};

//START SWORD CODE
var sword = function(swordX, swordY, swordH) {
stroke(218, 214, 45);
strokeWeight(2);
line(swordX + 17*swordH/58, swordY - 15*swordH/66, swordX + 5*swordH/58, swordY - 10*swordH/58); //Sword handle
strokeWeight(2.5);
stroke(133, 130, 130);
line(swordX + 18*swordH/58, swordY - 8*swordH/58, swordX + 15*swordH/58, swordY - 18*swordH/58);//Sword hilt
strokeWeight(4);
stroke(255, 255, 255);
line(swordX + 18*swordH/58, swordY - 14*swordH/58, swordX + 38*swordH/58, swordY - 19*swordH/58);//sword blade
};
//END SWORD CODE

//START Izik BITMOJI
var drawHead = function(x, y, bHeight) {
    fill(8, 6, 6);
    ellipse(x -10*bHeight/150, y +31*bHeight/150, 62*bHeight/150, 65*bHeight/150);//hood
    fill(237, 220, 180);
    ellipse(x -10*bHeight/150, y +32*bHeight/150, 55*bHeight/150, 55*bHeight/150);//head
    fill(15, 14, 14);
    ellipse(x -10*bHeight/150, y +10*bHeight/150, 50*bHeight/150, 10*bHeight/150);//hood
    fill(130, 110, 96);
    ellipse(x -25*bHeight/150, y +30*bHeight/150, 10*bHeight/150, 10*bHeight/150);//left eye
    ellipse(x +5*bHeight/150, y +30*bHeight/150, 10*bHeight/150, 10*bHeight/150);//right eye
    line(x -23*bHeight/150, y +48*bHeight/150, x +2*bHeight/150, y +48*bHeight/150);//mouth
};

var drawBody = function(x, y, bHeight) {
    fill(102, 96, 96);
    rect(x -35*bHeight/150, y +60*bHeight/150, 50*bHeight/150, 65*bHeight/150);//body
    noFill();
    line(x -20*bHeight/150, y +80*bHeight/150, x -30*bHeight/150, y +80*bHeight/150);   //intitial I (top line)
    line(x -25*bHeight/150, y +96*bHeight/150, x -25*bHeight/150, y +82*bHeight/150); //initial I (mid line)
    line(x -20*bHeight/150, y +98*bHeight/150, x -30*bHeight/150, y +98*bHeight/150); //initial I (bottom line)
    line(x -10*bHeight/150, y +98*bHeight/150, x -10*bHeight/150, y +80*bHeight/150); //initial P (straight line)
    arc(x -9*bHeight/150, y +84*bHeight/150, 10*bHeight/150, 10*bHeight/150, 270, 450); //inital P (curve)
};

var drawBitmoj = function (xpos, ypos, bHeight) {
    drawHead(xpos, ypos, bHeight);
    drawBody(xpos, ypos, bHeight);
};
//End Izik Bitmoji

//Start Diego Bitmoji
var drawBitmoji = function (x,y,bitmojiHeight)
{
noStroke();
fill(210, 153, 108);
ellipse(x, y, bitmojiHeight/100*93,bitmojiHeight/100*100); //head
fill(255, 255, 255);
fill(31, 7, 7); //black hair

quad(x-(bitmojiHeight/100*48),y-(bitmojiHeight/100*2),x-(bitmojiHeight/100*37),y-(bitmojiHeight/100*32),x-(bitmojiHeight/100*8),y-(bitmojiHeight/100*50),x-(bitmojiHeight/100*30),y-(bitmojiHeight/100*1)); //left hair

quad(x+(bitmojiHeight/100*49),y-(bitmojiHeight/100*1),x+(bitmojiHeight/100*38),y-(bitmojiHeight/100*34),x+(bitmojiHeight/100*18),y-(bitmojiHeight/100*49),x+(bitmojiHeight/100*32),y-(bitmojiHeight/100*2)); //right hair
stroke(56, 14, 14);

ellipse(x,y-(bitmojiHeight/100*37),bitmojiHeight/100*62,bitmojiHeight/100*28); //top of hair

fill(247, 242, 242); //right eye fill

ellipse(x-(bitmojiHeight/100*11),y+(bitmojiHeight/100*1),bitmojiHeight/100*9,bitmojiHeight/100*9); //right eye

ellipse(x+(bitmojiHeight/100*17),y+(bitmojiHeight/100*1),bitmojiHeight/100*9,bitmojiHeight/100*9); //left eye
fill(212, 155, 112); //nose fill 

bezier(x+(bitmojiHeight/100*2),y-(bitmojiHeight/100*1),x+(bitmojiHeight/100*24),y+(bitmojiHeight/100*27),x-(bitmojiHeight/100*8),y+(bitmojiHeight/100*13),x+(bitmojiHeight/100*1),y+(bitmojiHeight/100*15)); //nose
fill(255,255,255); //white fill for teeth

arc(x+(bitmojiHeight/100*3),y+(bitmojiHeight/100*25),bitmojiHeight/100*30,bitmojiHeight/100*15,1,180); //mouth

line(x-(bitmojiHeight/100*14),y+(bitmojiHeight/100*24),x+(bitmojiHeight/100*20),y+(bitmojiHeight/100*24)); //top of mouth
fill(18, 9, 9);

quad(x+(bitmojiHeight/100*52), y+(bitmojiHeight/100*50), x+(bitmojiHeight/100*90), y+(bitmojiHeight/100*110), x-(bitmojiHeight/100*66), y+(bitmojiHeight/100*109), x-(bitmojiHeight/100*46), y+(bitmojiHeight/100*51));

fill(224, 224, 224);

textSize(bitmojiHeight/101*40);
text("D R", x-(bitmojiHeight/129*30), y+(bitmojiHeight/156*92));
};
//END Diego Bitmoji

//Start Button Code for splash Screen 
var Button = function(config) { //Constructor = creates new buttons when called as new.
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
}; // The || is an 'or' identifier that sets the value as the shown number if nothing is passed in for the "this.something" 

Button.prototype.draw = function() { 
    fill(0, 234, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() { //Class that checks to see if the mouse is clicked inside the created button.
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() { //Calls the onClick function
    if (this.isMouseInside()) {
        this.onClick();
    }
};
var Button = function(config) { //Constructor = creates new buttons when called as new.
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
}; // The || is an 'or' identifier that sets the value as the shown number if nothing is passed in for the "this.something" 

Button.prototype.draw = function() { 
    fill(0, 234, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() { //Class that checks to see if the mouse is clicked inside the created button.
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() { //Calls the onClick function
    if (this.isMouseInside()) {
        this.onClick();
    }
};

var startButton = new Button({ //creates a new button instance with the name 'startButton'
    x: 125,
    y: 198,
    label: "Please click!",
    onClick: function() {
        currentScene = 1;
    }
});
// END SPLASH SCREEN BUTTON

//START SWORD BUTTON
var sworButton = function(config) { //Constructor = creates new buttons when called as new.
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 50;
    this.height = config.height || 15;
    this.label = config.label || "";
    this.onClick = config.onClick || function() {};
}; // The || is an 'or' identifier that sets the value as the shown number if nothing is passed in for the "this.something" 

sworButton.prototype.draw = function() { 
    noFill();
    
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

sworButton.prototype.isMouseInside = function() { //Class that checks to see if the mouse is clicked inside the created button.
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

sworButton.prototype.handleMouseClick = function() { //Calls the onClick function
    if (this.isMouseInside()) {
        this.onClick();
    }
};

var gameButton = new sworButton({ //creates a new button instance with the name gameButton
    x: 20,
    y: 326,
    label: "",
    onClick: function() {
        item += 1;
    }
});
//END SWORD BUTTON

//START CHEST BUTTON 
var chestButton = new sworButton({ //creates a new button instance with the name gameButton
    x: 329,
    y: 350,
    height: 30,
    label: "",
    onClick: function() {
        treasure += 1;
    }
});
//END CHEST BUTTON

//START ESCAPE BUTTON 
var escapeButton = new sworButton({ //creates a new button instance with the name gameButton
    x: 329,
    y: 350,
    height: 30,
    label: "",
    onClick: function() {
        treasure += 1;
    }
});
//END ESCAPE BUTTON 

//END BUTTON CODE

//START PLAYER CHAR' CODE
var Player = function(x, y) { //Creates Player Class
    this.x = x;
    this.y = y;
    this.img = getImage("cute/CharacterHornGirl");
};

Player.prototype.draw = function() { //Function that draws the Player and limits movement. 
    image(getImage("cute/CharacterHornGirl"), this.x, this.y, 60, 100);
    if (item === 0) { 
        this.x = constrain(this.x, 5, 150);
    } 
    else {
        this.x = constrain(this.x, 5, 360);
        sword(this.x + 31, this.y + 89, 64);
    }
};

Player.prototype.moveLeft = function() {
    this.img = getImage("cute/CharacterHornGirl");
    this.x -= 1;
    sword();
};

Player.prototype.moveRight = function() { 
    this.img = getImage("cute/CharacterHornGirl");
    this.x+= 1;
    sword();
};

var Char = new Player(105, 295);
var CharLeft = new Player(20, 295);
//END PLAYER CHAR' CODE

mouseClicked = function() { //Combined old function "mouse release" into mouseClicked. If the current scene = 0, then it displays the splash screen and only the button click will work, not the add label code. 
    if (currentScene === 0) {
    startButton.handleMouseClick();
    }
    else if (currentScene === 1 && Char.x < 35 && Char.x > 0) { 
        gameButton.handleMouseClick();
        
    }
    else if (currentScene === 2 && CharLeft.x < 360 && CharLeft.x > 275) { 
        chestButton.handleMouseClick();
    }
};

//START SCENE CODE
var splashScreen = function() { //Creates the starting screen
    background(136, 232, 192);
    textSize(30);
    text ("Final Project", 120, 150);
    drawBitmoj(312, 300, 110);
    startButton.draw();
    drawBitmoji(125,310,64);
};

var gameScene1 = function() { //Creates the 
    background(15, 191, 255);
    noStroke();
    image(getImage("cute/StoneBlock"), 0, 335, 400, 70);
    fill(255, 255, 255);
    ellipse(92,35,46,35);
    ellipse(110,49,46,35);
    ellipse(71,49,46,35);
    ellipse(79,70,46,35);
    ellipse(103,70,46,35);
    ellipse(266,35,46,35);
    ellipse(246,49,46,35);
    ellipse(287,49,46,35);
    ellipse(251,70,46,35);
    ellipse(286,70,46,35);
    fill(255, 255, 0);
    ellipse(365,25,40,37);
    fill(255, 0, 0);
    triangle(249,95,200,109,200,69);
    fill(150, 144, 144);
    fill(0, 0, 0);
    rect(197,109,9,69);
    rect(154,275,100,97);
    fill(112, 99, 11);
    rect(153,275,6,98);
    rect(182,275,6,98);
    rect(214,275,6,98);
    rect(247,275,6,98);
    rect(153,275,100,6);
    rect(153,298,100,6);
    rect(153,325,100,6);
    rect(153,353,100,6);
    fill(150, 144, 144);
    rect(0,138,86,234);
    rect(315,138,86,234);
    
    rect(85,177,243,66);
    
    
    escapeButton.draw();
 
    
    if (item === 0) {
    sword(20, 350, 64);
    gameButton.draw();
    }
    
    if (knight === 1) {
        if (Char.x < 149 || item === 0) {
            fill(0, 0, 0);
            noStroke();
            rect(200, 330, 20, 50);
        }
        else if (Char.x > 149 && item === 1) { 
            knight -= 1;
        }
    }
    
    
    
};

var gameScene2 = function() { 
    background(29, 31, 29);
    noStroke();
    image(getImage("cute/Star"),20,6,25,40);
    image(getImage("cute/Star"),79,41,25,40);
    image(getImage("cute/Star"),124,3,25,40);
    image(getImage("cute/Star"),214,6,25,40);
     image(getImage("cute/Star"),254,34,25,40);
    image(getImage("cute/StoneBlock"), 0, 335, 400, 70);
   
    fill(120, 118, 46);
    ellipse(334,31,48,48);
    fill(255, 0, 0);
    triangle(249,95,200,109,200,69);
    fill(150, 144, 144);
    fill(0, 0, 0);
    rect(199,109,9,69);
    fill(150, 144, 144);
    rect(0,138,86,234);
    rect(315,138,86,234);
    rect(85,177,243,66);
    
    
    if (treasure === 0) { 
        image(getImage("cute/ChestClosed"), 335, 337, 40, 40);
    }
    else if (treasure === 1) { 
        image(getImage("cute/GemOrange"), 340, 304, 30, 30);
        image(getImage("cute/ChestOpen"), 335, 337, 40, 40);
    }
    chestButton.draw();
    
};
//END SCENE CODE


for(var j = 0; j <100; ++j) {    
    xPositions.push(random(0,400));
    yPositions.push(random(0,400));
    speed.push(random(0,5));
    colors.push(random(0,255),random(0,255),random(0,255)); 
}

draw = function() {
    if (currentScene === 0) { 
        splashScreen();
    }
    else if (currentScene === 1){
        gameScene1();
        Char.draw();
     
        if (keyIsPressed && keyCode === 37) { 
            Char.moveLeft();
        }
        else if (keyIsPressed && keyCode === 39) { 
            Char.moveRight();
        }
    }
    else {}
    
    if (currentScene === 1 && Char.x > 360) {
        currentScene += 1;
    }
    
    if (currentScene === 2) { 
        gameScene2();
        CharLeft.draw();
        
        if (keyIsPressed && keyCode === 37) { 
            CharLeft.moveLeft();
        }
        else if (keyIsPressed && keyCode === 39) { 
            CharLeft.moveRight();
        }
        noStroke();
        yPositions [0] ++ ;
        xPositions.push(0,100);

        for (var i = 0; i < xPositions.length; i++) {
            //fill(colors[i]);
            fill(0, 200, 255);
            // if (xPositions [i] < mouseX +20 && xPositions [i] > mouseX - 20 &&      yPositions [i] < mouseY +20 && yPositions [i] > mouseY - 20) {fill(3, 3, 3);}
        
            ellipse(xPositions[i], yPositions[i],10,10);
            yPositions[i] += 5;
            if (yPositions[i] >=400) {
                yPositions[i] =0;
            }
        }
    }
    
    if (currentScene === 2 && CharLeft.x < 5) { 
        currentScene -= 1;
    }
};
 
